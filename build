#!/bin/bash
# Linux Live Kit version 7

stdErr () {
    >&2 echo "$*"
}
failAndExit () {
    local -i retCode
    if [[ $1 =~ [0-9] ]]; then
        retCode=$1
        shift
    else
        retCode=1
    fi
    stdErr "$*"
    exit $retCode
}

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

cd "$(dirname "$(realpath "$0")")" || failAndExit 1 "Could not cd to $0's directory"
CWD="$(pwd)"

for sourceFile in ./config ./livekitlib; do
    #shellcheck disable=SC1090
    source "$sourceFile" || failAndExit "Could not source '$sourceFile'"
done

# only root can continue, because only root can read all files from your system
allow_only_root

# check for xz
if [ "$(xz --help 2>&1 | grep -i "Compress")" = "" ]; then
   stdErr "xz not found or cannot compress"
   stdErr "you may consider installing xz-tools package"
   exit 1
fi

# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   stdErr "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
   stdErr "you may consider installing squashfs-tools package"
   exit 1
fi

MKISO=$(command -v mkisofs)
GNISO=$(command -v genisoimage)
[[ ! $MKISO && ! $GNISO ]] && failAndExit 3 "Cannot find mkisofs or genisoimage, stop"
if [[ $MKISO ]]; then
    MKISOFS="$MKISO"
else
    MKISOFS="$GNISO"
fi

set -x
# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   stdErr "Building initramfs image..."
   INITRAMFS=$(initramfs/initramfs_create) || failAndExit "Could not create initramfs"
fi

# create live kit filesystem (cpio archive)
rm -Rf "$LIVEKITDATA"
BOOT="$LIVEKITDATA/$LIVEKITNAME/boot"
mkdir -p "$BOOT"
mkdir -p "$BOOT/../changes"
mkdir -p "$BOOT/../modules"

if [[ $INITRAMFS ]]; then
   mv "$INITRAMFS" "$BOOT/initrfs.img"
fi

# BIOS / MBR booting
cp -r bootfiles/* "$BOOT"
sed -r "s:/boot/:/$LIVEKITNAME/boot/:" bootfiles/syslinux.cfg > "$BOOT/syslinux.cfg"
sed -r "s:/boot/:/$LIVEKITNAME/boot/:" bootfiles/bootinst.bat | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > "$BOOT/bootinst.bat"
cp "$VMLINUZ" "$BOOT/" || failAndExit "Could not copy '$VMLINUZ'"

# UEFI booting
mkdir -p "$BOOT/EFI/Boot"
cp bootfiles/EFI/Boot/syslinux.efi "$BOOT/EFI/Boot/bootx64.efi"
cp bootfiles/EFI/Boot/{ldlinux.e64,menu.c32,libutil.c32,vesamenu.c32,libcom32.c32} "$BOOT/EFI/Boot"
sed -r "s:/$LIVEKITNAME/boot/vesamenu:vesamenu:" "$BOOT/syslinux.cfg" > "$BOOT/EFI/Boot/syslinux.cfg"

# create compressed 01-core.sb
COREFS=""
for i in $MKMOD; do
   if [ -d "/$i" ]; then
      COREFS+=" /$i"
   fi
done
if [ "$SKIPCOREMOD" = "" ]; then
   mksquashfs $COREFS "$LIVEKITDATA/$LIVEKITNAME/modules/01-core.$BEXT" -comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || failAndExit "Could not create squashfs"
fi

ARCH=$(uname -m)
TARGET=/tmp

grep -F "#" "$CWD/bootinfo.txt" | sed -r "s/mylinux/$LIVEKITNAME/" | sed -r "s/\$/\x0D/" > readme.txt

echo cd $LIVEKITDATA '&&' $MKISOFS -o "$TARGET/$LIVEKITNAME-$ARCH.iso" -v -J -R -D -A "$LIVEKITNAME" -V "$LIVEKITNAME" \
-no-emul-boot -boot-info-table -boot-load-size 4 \
-b "$LIVEKITNAME"/boot/isolinux.bin -c "$LIVEKITNAME"/boot/isolinux.boot . \
> $TARGET/gen_"$LIVEKITNAME"_iso.sh
chmod o+x $TARGET/gen_"$LIVEKITNAME"_iso.sh

echo cd $LIVEKITDATA '&&' zip -0 -r "$TARGET/$LIVEKITNAME-$ARCH.zip" '*' \
> $TARGET/gen_"$LIVEKITNAME"_zip.sh
chmod o+x $TARGET/gen_"$LIVEKITNAME"_zip.sh

echo "-----------------------------"
echo "Finished. Find your result in $LIVEKITDATA"
echo "To build ISO, run: $WORKDIR/gen_${LIVEKITNAME}_iso.sh"
echo "To build ZIP, run: $WORKDIR/gen_${LIVEKITNAME}_zip.sh"
